apply plugin: 'java'
apply plugin: 'application'

group = 'eu.malycha'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.slf4j:slf4j-api:1.7.36')
    implementation('org.slf4j:slf4j-simple:1.7.36')
    implementation('net.objecthunter:exp4j:0.4.8')
    implementation('org.apache.commons:commons-lang3:3.12.0')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.8.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.2')
    testImplementation('org.mockito:mockito-core:4.3.1')
}

application {
    mainClassName = "eu.malycha.kypai.threads.Main"
    applicationDefaultJvmArgs = ['-Xms16384m', '-Xmx16384m']
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "failed", "skipped"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

sourceSets {
    integration {
        java {
            compileClasspath += sourceSets.test.compileClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
            srcDir '$projectDir/src/integration/java'
        }
        resources.srcDir '$projectDir/src/integration/resources'
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

integrationTest {
    useJUnitPlatform()

    testLogging {
        events "passed", "failed", "skipped"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

jar {
    manifest {
        attributes "Main-Class": "eu.malycha.kypai.threads.Main"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
